/**
 * Simple Ollama MCP Server
 *
 * A simplified version of the Ollama MCP Server to ensure it works correctly.
 */

const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

// Constants
const PORT = process.env.PORT || 3011;
const OLLAMA_API_URL = process.env.OLLAMA_API_URL || 'http://localhost:11434';

// Create Express app
const app = express();
app.use(cors());
app.use(express.json());

// Initialize server state
const serverState = {
  id: 'ollama-mcp',
  name: 'Ollama MCP Server',
  version: '1.0.0',
  status: 'ready',
  capabilities: [
    'text_generation',
    'code_generation',
    'embedding_generation'
  ],
  models: [],
  resources: [],
  tools: [],
  prompts: []
};

// Initialize models
let availableModels = [];

// Routes

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'Ollama MCP Server is running',
    status: 'ok'
  });
});

// MCP status endpoint
app.get('/mcp/status', (req, res) => {
  res.json({
    id: serverState.id,
    status: serverState.status
  });
});

// MCP models endpoint
app.get('/mcp/models', (req, res) => {
  res.json({
    models: serverState.models
  });
});

// MCP sample endpoint
app.post('/mcp/sample', async (req, res) => {
  try {
    const { model, prompt, options } = req.body;

    if (!model || !prompt) {
      return res.status(400).json({
        error: 'Missing required parameters',
        details: 'Model and prompt are required'
      });
    }

    // Set default options
    const defaultOptions = {
      temperature: 0.7,
      max_tokens: 1000,
      stop: [],
      stream: false
    };

    // Merge default options with provided options
    const mergedOptions = { ...defaultOptions, ...options };

    // Mock response since Ollama is not running
    console.log(`Received request to generate text with model: ${model}`);
    console.log(`Prompt: ${prompt}`);
    console.log(`Options: ${JSON.stringify(mergedOptions)}`);

    // Generate a mock response
    const mockResponse = `This is a mock response for the prompt: "${prompt}". In a real implementation, this would be generated by the Ollama model ${model}.`;

    res.json({
      id: uuidv4(),
      model: model,
      output: mockResponse
    });
  } catch (error) {
    console.error('Error sampling from Ollama:', error);
    res.status(500).json({
      error: 'Failed to sample from model',
      details: error.message
    });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Ollama MCP Server running on port ${PORT}`);
  console.log(`Ollama API URL: ${OLLAMA_API_URL} (mock mode)`);

  // Add mock models
  availableModels = ['llama3', 'codellama', 'mistral', 'phi3'];
  serverState.models = availableModels.map(name => ({
    id: name,
    name: name,
    capabilities: ['text_generation', 'code_generation', 'embedding_generation']
  }));
  console.log(`Available models (mock): ${availableModels.join(', ')}`);

  // Register with Nexus MCP Hub
  try {
    const NEXUS_HUB_URL = process.env.NEXUS_HUB_URL || 'http://localhost:8000';
    console.log(`Attempting to register with Nexus MCP Hub at ${NEXUS_HUB_URL}`);

    axios.post(`${NEXUS_HUB_URL}/api/servers/register`, {
      id: serverState.id,
      name: serverState.name,
      url: `http://localhost:${PORT}`,
      capabilities: serverState.capabilities
    })
    .then(response => {
      if (response.data.success) {
        console.log('Successfully registered with Nexus MCP Hub');
      } else {
        console.error('Failed to register with Nexus MCP Hub:', response.data.error);
      }
    })
    .catch(error => {
      console.error('Error registering with Nexus MCP Hub:', error.message);
    });
  } catch (error) {
    console.error('Error setting up registration with Nexus MCP Hub:', error.message);
  }
});
