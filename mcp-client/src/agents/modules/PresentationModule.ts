/**
 * PresentationModule
 * 
 * Module for presenting information in a beautiful UI.
 */

import { Agent } from '../Agent';
import { BaseModule } from './BaseModule';
import { ModuleConfig } from './Module';
import { NexusClient } from '../../core/NexusClient';
import { logger } from '../../utils/logger';

/**
 * Presentation format
 */
export enum PresentationFormat {
  MARKDOWN = 'markdown',
  HTML = 'html',
  JSON = 'json'
}

/**
 * Presentation style
 */
export enum PresentationStyle {
  ACADEMIC = 'academic',
  PROFESSIONAL = 'professional',
  CREATIVE = 'creative',
  MINIMAL = 'minimal'
}

/**
 * PresentationModule configuration
 */
export interface PresentationModuleConfig extends ModuleConfig {
  nexusClient: NexusClient;
  defaultFormat?: PresentationFormat;
  defaultStyle?: PresentationStyle;
}

/**
 * PresentationModule provides capabilities for presenting information in a beautiful UI.
 */
export class PresentationModule extends BaseModule {
  private nexusClient: NexusClient;
  private defaultFormat: PresentationFormat;
  private defaultStyle: PresentationStyle;
  private templates: Map<string, string> = new Map();

  /**
   * Creates a new PresentationModule instance.
   * @param config Module configuration
   */
  constructor(config: PresentationModuleConfig) {
    super(config);
    this.nexusClient = config.nexusClient;
    this.defaultFormat = config.defaultFormat || PresentationFormat.HTML;
    this.defaultStyle = config.defaultStyle || PresentationStyle.PROFESSIONAL;
    this.initializeTemplates();
  }

  /**
   * Initializes presentation templates.
   */
  private initializeTemplates(): void {
    // HTML templates
    this.templates.set('html:professional', `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f9f9f9;
    }
    header {
      background-color: #fff;
      padding: 20px;
      border-bottom: 1px solid #eee;
      margin-bottom: 30px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    h1 {
      color: #2c3e50;
      margin-top: 0;
    }
    h2 {
      color: #3498db;
      border-bottom: 1px solid #eee;
      padding-bottom: 10px;
    }
    h3 {
      color: #2980b9;
    }
    a {
      color: #3498db;
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    .container {
      background-color: #fff;
      padding: 30px;
      border-radius: 5px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .metadata {
      color: #7f8c8d;
      font-size: 0.9em;
      margin-bottom: 20px;
    }
    .section {
      margin-bottom: 30px;
    }
    .footer {
      text-align: center;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 1px solid #eee;
      color: #7f8c8d;
      font-size: 0.9em;
    }
    code {
      background-color: #f8f8f8;
      border: 1px solid #ddd;
      border-radius: 3px;
      padding: 2px 5px;
      font-family: 'Courier New', monospace;
    }
    pre {
      background-color: #f8f8f8;
      border: 1px solid #ddd;
      border-radius: 3px;
      padding: 10px;
      overflow-x: auto;
    }
    blockquote {
      border-left: 4px solid #3498db;
      padding-left: 15px;
      color: #555;
      margin-left: 0;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin-bottom: 20px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px 12px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    img {
      max-width: 100%;
      height: auto;
      display: block;
      margin: 20px auto;
    }
    .image-caption {
      text-align: center;
      color: #7f8c8d;
      font-size: 0.9em;
      margin-top: 5px;
    }
  </style>
</head>
<body>
  <header>
    <h1>{{title}}</h1>
    <div class="metadata">{{metadata}}</div>
  </header>
  <div class="container">
    {{content}}
  </div>
  <div class="footer">
    Generated by Nexus MCP Client on {{date}}
  </div>
</body>
</html>`);

    this.templates.set('html:academic', `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  <style>
    body {
      font-family: 'Palatino Linotype', 'Book Antiqua', Palatino, serif;
      line-height: 1.6;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background-color: #fff;
    }
    header {
      text-align: center;
      margin-bottom: 40px;
      padding-bottom: 20px;
      border-bottom: 2px solid #333;
    }
    h1 {
      font-size: 24px;
      margin-bottom: 10px;
    }
    h2 {
      font-size: 20px;
      margin-top: 30px;
      margin-bottom: 15px;
    }
    h3 {
      font-size: 18px;
      margin-top: 25px;
      margin-bottom: 10px;
    }
    .author {
      font-style: italic;
      margin-bottom: 5px;
    }
    .abstract {
      margin-top: 30px;
      margin-bottom: 30px;
      font-style: italic;
    }
    .abstract-title {
      font-weight: bold;
      text-align: center;
      margin-bottom: 10px;
    }
    .section {
      margin-bottom: 30px;
    }
    .footnote {
      font-size: 0.9em;
      margin-top: 5px;
    }
    .citation {
      font-size: 0.9em;
    }
    .references {
      margin-top: 40px;
      border-top: 1px solid #ddd;
      padding-top: 20px;
    }
    .references h2 {
      font-size: 20px;
    }
    .reference {
      margin-bottom: 10px;
      padding-left: 20px;
      text-indent: -20px;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin: 20px 0;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px 12px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    figure {
      text-align: center;
      margin: 20px 0;
    }
    figcaption {
      font-size: 0.9em;
      margin-top: 5px;
    }
    img {
      max-width: 100%;
    }
    blockquote {
      margin: 20px 0;
      padding: 10px 20px;
      background-color: #f9f9f9;
      border-left: 3px solid #ddd;
    }
  </style>
</head>
<body>
  <header>
    <h1>{{title}}</h1>
    <div class="author">{{author}}</div>
    <div class="metadata">{{metadata}}</div>
  </header>
  
  <div class="abstract">
    <div class="abstract-title">Abstract</div>
    <p>{{abstract}}</p>
  </div>
  
  <div class="content">
    {{content}}
  </div>
  
  <div class="references">
    <h2>References</h2>
    {{references}}
  </div>
</body>
</html>`);

    // Markdown templates
    this.templates.set('markdown:professional', `# {{title}}

*{{metadata}}*

{{content}}

---
Generated by Nexus MCP Client on {{date}}
`);

    this.templates.set('markdown:academic', `# {{title}}

*{{author}}*

*{{metadata}}*

## Abstract

{{abstract}}

{{content}}

## References

{{references}}
`);
  }

  /**
   * Registers capabilities with the agent.
   * @param agent Agent to register capabilities with
   * @returns Promise resolving when registration is complete
   */
  async registerCapabilities(agent: Agent): Promise<void> {
    try {
      logger.info(`Registering presentation capabilities for agent: ${agent.getName()}`);

      // Register formatContent capability
      agent.registerCapability('formatContent', async (parameters: any) => {
        try {
          const { content, title, format, style, metadata } = parameters;
          return this.formatContent(content, title, format || this.defaultFormat, style || this.defaultStyle, metadata);
        } catch (error) {
          logger.error(`Failed to format content: ${error instanceof Error ? error.message : String(error)}`);
          throw error;
        }
      });

      // Register savePresentation capability
      agent.registerCapability('savePresentation', async (parameters: any) => {
        try {
          const { content, title, format, style, metadata, filename } = parameters;
          return this.savePresentation(content, title, format || this.defaultFormat, style || this.defaultStyle, metadata, filename);
        } catch (error) {
          logger.error(`Failed to save presentation: ${error instanceof Error ? error.message : String(error)}`);
          throw error;
        }
      });

      // Register getAvailableFormats capability
      agent.registerCapability('getAvailableFormats', async () => {
        return Object.values(PresentationFormat);
      });

      // Register getAvailableStyles capability
      agent.registerCapability('getAvailableStyles', async () => {
        return Object.values(PresentationStyle);
      });

      logger.info(`Presentation capabilities registered for agent: ${agent.getName()}`);
    } catch (error) {
      logger.error(`Failed to register presentation capabilities: ${error instanceof Error ? error.message : String(error)}`);
      throw error;
    }
  }

  /**
   * Formats content using a template.
   * @param content Content to format
   * @param title Content title
   * @param format Output format
   * @param style Presentation style
   * @param metadata Additional metadata
   * @returns Formatted content
   */
  private formatContent(content: string, title: string, format: PresentationFormat, style: PresentationStyle, metadata: any = {}): string {
    try {
      logger.info(`Formatting content with format ${format} and style ${style}`);

      // Get template
      const templateKey = `${format}:${style}`;
      const template = this.templates.get(templateKey);

      if (!template) {
        throw new Error(`Template not found for format ${format} and style ${style}`);
      }

      // Format metadata
      let metadataStr = '';
      if (typeof metadata === 'string') {
        metadataStr = metadata;
      } else if (typeof metadata === 'object') {
        metadataStr = Object.entries(metadata)
          .map(([key, value]) => `${key}: ${value}`)
          .join(' | ');
      }

      // Replace placeholders
      let formatted = template
        .replace(/{{title}}/g, title)
        .replace(/{{metadata}}/g, metadataStr)
        .replace(/{{content}}/g, content)
        .replace(/{{date}}/g, new Date().toISOString())
        .replace(/{{author}}/g, metadata.author || 'Nexus MCP Client')
        .replace(/{{abstract}}/g, metadata.abstract || '')
        .replace(/{{references}}/g, metadata.references || '');

      return formatted;
    } catch (error) {
      logger.error(`Failed to format content: ${error instanceof Error ? error.message : String(error)}`);
      throw error;
    }
  }

  /**
   * Saves a presentation.
   * @param content Content to save
   * @param title Content title
   * @param format Output format
   * @param style Presentation style
   * @param metadata Additional metadata
   * @param filename Custom filename
   * @returns Save status
   */
  private async savePresentation(content: string, title: string, format: PresentationFormat, style: PresentationStyle, metadata: any = {}, filename?: string): Promise<any> {
    try {
      logger.info(`Saving presentation with format ${format} and style ${style}`);

      // Format content
      const formattedContent = this.formatContent(content, title, format, style, metadata);

      // Generate filename if not provided
      if (!filename) {
        const sanitizedTitle = title.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        filename = `${sanitizedTitle}_${timestamp}`;
      }

      // Determine file extension
      let extension = '';
      switch (format) {
        case PresentationFormat.HTML:
          extension = 'html';
          break;
        case PresentationFormat.MARKDOWN:
          extension = 'md';
          break;
        case PresentationFormat.JSON:
          extension = 'json';
          break;
        default:
          extension = 'txt';
      }

      // Save file
      await this.nexusClient.callTool('save-file', {
        instructions_reminder: 'LIMIT THE FILE CONTENT TO AT MOST 300 LINES. IF MORE CONTENT NEEDS TO BE ADDED USE THE str-replace-editor TOOL TO EDIT THE FILE AFTER IT HAS BEEN CREATED.',
        file_path: `D:\\mcp\\nexus\\presentations\\${filename}.${extension}`,
        file_content: formattedContent,
        add_last_line_newline: true
      });

      return {
        success: true,
        title,
        filename: `${filename}.${extension}`,
        format,
        style
      };
    } catch (error) {
      logger.error(`Failed to save presentation: ${error instanceof Error ? error.message : String(error)}`);
      throw error;
    }
  }

  /**
   * Handles a task.
   * @param task Task to handle
   * @param agent Agent handling the task
   * @returns Promise resolving to true if the task was handled, false otherwise
   */
  async handleTask(task: string, agent: Agent): Promise<boolean> {
    // Check if the task is a presentation task
    const presentationPatterns = [
      /format (the |this )?content/i,
      /create (a |an )?presentation/i,
      /present (the |this )?information/i,
      /display (the |this )?data/i,
      /visualize (the |this )?information/i
    ];

    if (presentationPatterns.some(pattern => pattern.test(task))) {
      try {
        logger.info(`Handling presentation task: ${task}`);

        // Extract content from agent memory
        const memory = agent.getMemory();
        const lastUserMessage = memory.filter(msg => msg.role === 'user').pop();
        const lastAssistantMessage = memory.filter(msg => msg.role === 'assistant').pop();

        if (!lastUserMessage || !lastAssistantMessage) {
          return false;
        }

        // Format content
        const content = lastAssistantMessage.content;
        const title = lastUserMessage.content.substring(0, 50) + '...';
        
        const formattedContent = this.formatContent(
          content,
          title,
          this.defaultFormat,
          this.defaultStyle,
          { timestamp: new Date().toISOString() }
        );

        // Add result to agent memory
        agent.addToMemory({
          role: 'assistant',
          content: `I've formatted the content in ${this.defaultStyle} style using ${this.defaultFormat} format.`
        });

        return true;
      } catch (error) {
        logger.error(`Failed to handle presentation task: ${error instanceof Error ? error.message : String(error)}`);
        return false;
      }
    }

    return false;
  }

  /**
   * Gets the Nexus client.
   * @returns Nexus client
   */
  getNexusClient(): NexusClient {
    return this.nexusClient;
  }

  /**
   * Sets the Nexus client.
   * @param nexusClient Nexus client
   */
  setNexusClient(nexusClient: NexusClient): void {
    this.nexusClient = nexusClient;
  }

  /**
   * Gets the default format.
   * @returns Default format
   */
  getDefaultFormat(): PresentationFormat {
    return this.defaultFormat;
  }

  /**
   * Sets the default format.
   * @param defaultFormat Default format
   */
  setDefaultFormat(defaultFormat: PresentationFormat): void {
    this.defaultFormat = defaultFormat;
  }

  /**
   * Gets the default style.
   * @returns Default style
   */
  getDefaultStyle(): PresentationStyle {
    return this.defaultStyle;
  }

  /**
   * Sets the default style.
   * @param defaultStyle Default style
   */
  setDefaultStyle(defaultStyle: PresentationStyle): void {
    this.defaultStyle = defaultStyle;
  }

  /**
   * Adds a template.
   * @param format Output format
   * @param style Presentation style
   * @param template Template
   */
  addTemplate(format: PresentationFormat, style: PresentationStyle, template: string): void {
    this.templates.set(`${format}:${style}`, template);
  }

  /**
   * Gets a template.
   * @param format Output format
   * @param style Presentation style
   * @returns Template or null if not found
   */
  getTemplate(format: PresentationFormat, style: PresentationStyle): string | null {
    return this.templates.get(`${format}:${style}`) || null;
  }
}
